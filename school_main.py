import telebot
from telebot import types

API_TOKEN = "5926697072:AAEEzRzJHFxijPCrCBNgZsYHkrPhxE-mdeg"
GROUP_CHAT_ID = -1003167500913

bot = telebot.TeleBot(API_TOKEN)
user_state = {}

# –°—Ç–∞–¥–∏–∏
STAGE_LANG = "LANG"
STAGE_CATEGORY = "CATEGORY"
STAGE_INPUT = "INPUT"
STAGE_CONTACT_OPTION = "CONTACT_OPTION"
STAGE_WAIT_CONTACT = "WAIT_CONTACT"

# –ö–Ω–æ–ø–∫–∏
RU_LANG_BTN = "–†—É—Å—Å–∫–∏–π"
UZ_LANG_BTN = "O'zbekcha"
RU_CATS = ["–ñ–∞–ª–æ–±–∞", "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"]
UZ_CATS = ["Shikoyat", "Taklif"]
RU_BACK = "–ù–∞–∑–∞–¥"
UZ_BACK = "Orqaga"

RU_SEND_WITHOUT_CONTACT = "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞"
RU_SEND_WITH_CONTACT = "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º"
UZ_SEND_WITHOUT_CONTACT = "Kontaktsiz yuborish"
UZ_SEND_WITH_CONTACT = "Kontakt bilan yuborish"

TEXTS = {
    "welcome_first": {
        "ru": "üá∑üá∫ –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –∏ –∂–∞–ª–æ–±–∞–º–∏ –≤ Thompson International School.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫: ",
        "uz": "üá∫üáø Assalomu alaykum! Thompson International School taklif va shikoyatlar bo‚Äòyicha yordamchisiman.\n\nIltimos, tilni tanlang:"
    },
    "choose_category": {
        "ru": "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–º —Å–æ–æ–±—â–∏—Ç—å:",
        "uz": "Nimani bizga bildirmoqchisiz?"
    },
    "enter_complaint": {
        "ru": "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ—é –∂–∞–ª–æ–±—É:",
        "uz": "Iltimos, shikoyatingizni yozing:"
    },
    "enter_suggestion": {
        "ru": "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ—ë –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:",
        "uz": "Iltimos, taklifingizni yozing:"
    },
    "contact_option": {
        "ru": "–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ?",
        "uz": "Xabaringizni qanday yuborishni xohlaysiz?"
    },
    "send_success": {
        "ru": "–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –æ—Ç–∑—ã–≤!\n\n–ö–∞–∂–¥—ã–π –æ—Ç–∑—ã–≤ –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–º —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ª—É—á—à–µ. –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à—É –∑–∞—è–≤–∫—É.",
        "uz": "Fikringiz uchun tashakkur! Har bir fikr bizning yanada yaxshilanishimizga yordam beradi. Murojaatingiz ko‚Äòrib chiqiladi."
    },
    "contact_request": {
        "ru": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:",
        "uz": "Iltimos, bog‚Äòlanish uchun kontaktingizni ulashing:"
    },
    "unknown_command": {
        "ru": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏",
        "uz": "Iltimos, tugmalardan foydalaning"
    }
}


def get_lang_keyboard():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(types.KeyboardButton(RU_LANG_BTN), types.KeyboardButton(UZ_LANG_BTN))
    return kb


def get_category_keyboard(lang):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    cats = RU_CATS if lang == "ru" else UZ_CATS
    back = RU_BACK if lang == "ru" else UZ_BACK
    kb.add(*[types.KeyboardButton(c) for c in cats])
    # kb.add(types.KeyboardButton(back))  # –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–∑–∞–¥, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    return kb


def get_back_keyboard(lang):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(types.KeyboardButton(RU_BACK if lang == "ru" else UZ_BACK))
    return kb


def get_contact_option_keyboard(lang):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    if lang == "ru":
        btn1 = RU_SEND_WITHOUT_CONTACT
        btn2 = RU_SEND_WITH_CONTACT
    else:
        btn1 = UZ_SEND_WITHOUT_CONTACT
        btn2 = UZ_SEND_WITH_CONTACT
    kb.row(types.KeyboardButton(btn1), types.KeyboardButton(btn2))
    return kb


def get_contact_keyboard(lang):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    text = "–û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç" if lang == "ru" else "Kontakt qoldirish"
    kb.add(types.KeyboardButton(text, request_contact=True))
    return kb


def user_step(user_id):
    return user_state.get(user_id, {}).get("stage", None)


def set_state(user_id, **kwargs):
    user_state.setdefault(user_id, {}).update(**kwargs)


def reset_state(user_id):
    if user_id in user_state:
        user_state[user_id] = {}


@bot.message_handler(commands=['start'])
def handle_start(message):
    user_id = message.from_user.id
    set_state(user_id, stage=STAGE_LANG)
    bot.send_message(user_id, TEXTS["welcome_first"]["ru"] + "\n\n" + TEXTS["welcome_first"]["uz"],
                     reply_markup=get_lang_keyboard())


@bot.message_handler(func=lambda m: user_step(m.from_user.id) == STAGE_LANG)
def handle_lang(message):
    user_id = message.from_user.id
    if message.text == RU_LANG_BTN:
        set_state(user_id, lang="ru", stage=STAGE_CATEGORY)
        bot.send_message(user_id, TEXTS["choose_category"]["ru"], reply_markup=get_category_keyboard("ru"))
    elif message.text == UZ_LANG_BTN:
        set_state(user_id, lang="uz", stage=STAGE_CATEGORY)
        bot.send_message(user_id, TEXTS["choose_category"]["uz"], reply_markup=get_category_keyboard("uz"))
    else:
        bot.send_message(user_id, TEXTS["unknown_command"]["ru"], reply_markup=get_lang_keyboard())


@bot.message_handler(func=lambda m: user_step(m.from_user.id) == STAGE_CATEGORY)
def handle_category(message):
    user_id = message.from_user.id
    lang = user_state[user_id]["lang"]
    cat_map = RU_CATS if lang == "ru" else UZ_CATS
    if message.text in cat_map:
        set_state(user_id, category=message.text, stage=STAGE_INPUT)
        prompt = TEXTS["enter_complaint"][lang] if message.text == cat_map[0] else TEXTS["enter_suggestion"][lang]
        bot.send_message(user_id, prompt, reply_markup=get_back_keyboard(lang))
    else:
        bot.send_message(user_id, TEXTS["unknown_command"][lang], reply_markup=get_category_keyboard(lang))


@bot.message_handler(func=lambda m: user_step(m.from_user.id) == STAGE_INPUT)
def handle_input(message):
    user_id = message.from_user.id
    lang = user_state[user_id]["lang"]
    back = RU_BACK if lang == "ru" else UZ_BACK
    if message.text == back:
        set_state(user_id, stage=STAGE_CATEGORY)
        bot.send_message(user_id, TEXTS["choose_category"][lang], reply_markup=get_category_keyboard(lang))
        return
    set_state(user_id, feedback=message.text, stage=STAGE_CONTACT_OPTION)
    bot.send_message(user_id, TEXTS["contact_option"][lang], reply_markup=get_contact_option_keyboard(lang))


@bot.message_handler(func=lambda m: user_step(m.from_user.id) == STAGE_CONTACT_OPTION)
def handle_send_option(message):
    user_id = message.from_user.id
    lang = user_state[user_id]["lang"]
    with_contact = False
    if ((lang == "ru" and message.text == RU_SEND_WITHOUT_CONTACT) or
            (lang == "uz" and message.text == UZ_SEND_WITHOUT_CONTACT)):
        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        send_feedback(user_id, with_contact=False)
    elif ((lang == "ru" and message.text == RU_SEND_WITH_CONTACT) or
          (lang == "uz" and message.text == UZ_SEND_WITH_CONTACT)):
        # –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å –Ω–∏–º
        set_state(user_id, stage=STAGE_WAIT_CONTACT)
        bot.send_message(user_id, TEXTS["contact_request"][lang], reply_markup=get_contact_keyboard(lang))
    else:
        bot.send_message(user_id, TEXTS["unknown_command"][lang], reply_markup=get_contact_option_keyboard(lang))


@bot.message_handler(content_types=['contact'])
def handle_contact(message):
    user_id = message.from_user.id
    stage = user_step(user_id)
    if stage != STAGE_WAIT_CONTACT:
        return
    set_state(user_id, contact=message.contact.phone_number)
    send_feedback(user_id, with_contact=True)


def send_feedback(user_id, with_contact):
    data = user_state[user_id]
    lang = data["lang"]
    category = data["category"]
    feedback_txt = data["feedback"]
    contact = data.get("contact", "") if with_contact else ""
    user_name = bot.get_chat(user_id).username or bot.get_chat(user_id).first_name

    # –°–æ–∑–¥–∞—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –≥—Ä—É–ø–ø—ã
    text_for_group = (
        f"üìå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç Thompson International School Bot\n"
        f"üá∑üá∫üá∫üáø –Ø–∑—ã–∫:   [{lang.upper()}]\n"
        f"üì¨ –¢–∏–ø: {category}\n"
        f"üñä –û—Ç:  @{user_name},\n"
        f"‚òéÔ∏è –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:  {contact if contact else '–ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'}\n"
        f"üîñ –û–ø–∏—Å–∞–Ω–∏–µ:\n{feedback_txt}"
    )
    bot.send_message(GROUP_CHAT_ID, text_for_group)
    # –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.send_message(user_id, TEXTS["send_success"][lang], reply_markup=get_category_keyboard(lang))
    # –°–±—Ä–æ—Å–∏—Ç—å —Ç–æ–ª—å–∫–æ —ç—Ç–∞–ø (–æ—Å—Ç–∞–≤–∏—Ç—å —è–∑—ã–∫ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞)
    set_state(user_id, stage=STAGE_CATEGORY)
    # –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç: –µ–≥–æ –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å!


@bot.message_handler(func=lambda m: True)
def default_handler(message):
    user_id = message.from_user.id
    state = user_state.get(user_id, {})
    lang = state.get("lang", "ru")
    stage = state.get("stage", None)
    if not stage:
        handle_start(message)
    else:
        bot.send_message(user_id, TEXTS["unknown_command"][lang])


if __name__ == "__main__":
    bot.infinity_polling()
